searchState.loadedDescShard("cedarling", 0, "Cedarling\nError encountered while parsing Action to EntityUid\nAlways\nConfiguration to specify authorization workflow.\nRaw authorization config\nError type for Authorization Service\nResult of authorization and evaluation cedar policy based …\nBootstrap configuration properties for configuration …\nError while parse <code>BootstrapConfigRaw</code>\nRepresents errors that may occur while loading a …\nStruct that represent mapping mapping <code>Bootstrap properties</code> …\nError returned when both <code>CEDARLING_USER_AUTHZ</code> and …\nError encountered while building the context for the …\nError encountered while building Cedar Entities\nError encountered while building Role entity in an …\nCedar entity mapping information\nThe instance of the Cedarling application. It is safe to …\nError returned when multiple policy store sources were …\nError encountered while validating context according to …\nDebug level\nError returned when parsing the file as JSON fails.\nError returned when parsing the file as TOML fails.\nError returned when parsing the file as YAML fails.\nRepresent as disabled.\nError level\nRepresent as enabled.\nError encountered while parsing all entities to json for …\nBootstrap Configurations for the JWT to Cedar entity …\nRaw entity builder config\nCedar policy entity data fields represent EntityUid\nEntity names\nError encountered while executing the rule for principals\nFatal level\nEnum varians that represent if feature is enabled or …\nRead policy from a JSON File.\nRead policy from a YAML File.\nInfo level\nID token trust mode\nError encountered while building the context for the …\nIf present\nErrors that can occur during initialization Cedarling.\nError returned when Cedarling fails to obtain client …\nError returned when the file format is unsupported.\nError returned when the lock server configuration URI is …\nError encountered while creating <code>cedar_policy::Request</code> for …\nRead the policy directly from a raw JSON string.\nJsonLogic rule using JsonLogic Default implementation:\nThe set of Bootstrap properties related to JWT validation.\nRaw JWT config\nError returned when failing to load a local JWKS\nFetch the policies from the Lock Master service using a …\nLock service config\nRaw lock service config\nA set of properties used to configure logging in the …\nRaw log config\nLog levels Fatal level is the highest, trace is lowest\nLog Storage interface for getting log entries from the …\nLog type configuration. <code>CEDARLING_LOG_TYPE</code> in bootstrap …\nLogger holds all logs in database (in memory) with …\nConfiguration for memory log.\nError returned when <code>CEDARLING_LOCK</code> is set to <code>enabled</code> but …\nError returned when the boostrap property <code>CEDARLING_LOG_TTL</code>…\nError returned when no policy store source was provided.\nNever\nLogger do nothing. It means that all logs will be ignored.\n<code>PolicyStoreConfig</code> - Configuration for the policy store.\nRaw policy store config\n<code>PolicyStoreSource</code> represents the source from which …\nError encountered while processing JWT token data\nError returned when the file cannot be read.\nBox to store authorization data\nBox to store authorization data, with any additional …\nError while preparing config for internal services\nError while initializing a Service\nLogger writes log information to std output stream.\nStrict\nTrace level\nUnsigned role ID source\nError returned when the policy store file is in an …\nError encountered while checking if the Entities adhere to …\nWarn level\nRead the policy directly from a raw YAML string.\nAllow interaction with a Lock server with invalid …\nAccept invalid certs\nAllow interaction with a Lock server with invalid …\ncedar_policy action\ncedar_policy action\nHuman friendly identifier for the application\n<code>CEDARLING_APPLICATION_NAME</code> in bootstrap properties …\nentity attributes\nHow often to send health messages to Lock Master (0 to …\nHow often to send log messages to Lock Master (0 to turn …\nHow often to send telemetry messages to Lock Master (0 to …\nAuthorization config module\nA set of properties used to configure authorization …\nAuthorize request makes authorization decision based on …\nAuthorize request with unsigned data. makes authorization …\nToggles building the <code>User</code> entity\nToggles building the <code>Workload</code> entity\nDecision of result works based on […\nCedar entity mapping info\nURI where Cedarling can get metadata about the lock server.\nConfig URI\ncontext to be used in cedar_policy\ncontext to be used in cedar_policy\nResult of authorization true means <code>ALLOW</code> false means <code>Deny</code>\nDecision log default JWT ID\nToken claims that will be used for decision logging. …\nToken claims that will be used for decision logging. …\nDecision log user claims\nList of claims to map from user entity, such as [“sub”…\nList of claims to map from user entity, such as [“sub”…\nDecision log workload claims\nList of claims to map from user entity, such as [“…\nList of claims to map from user entity, such as [“…\nToggles whether Cedarling should listen for SSE config …\nDynamic config\nControls whether Cedarling should listen for SSE config …\nEntity builder config module\nA set of properties used to configure the JWTs to Cedar …\nThe names of the buildable Cedar entity type names\nentity type name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad config from environment variables. If you need with …\nDeserializes a JSON string into <code>EntityData</code>\nConstruct an instance from BootstrapConfigRaw\nConstruct <code>BootstrapConfig</code> from environment variables and …\nGet specific log entry\nReturns a list of all log ids\nGet logs by request_id. Return log entries that match the …\nGet log by request_id and tag, like composite key …\nGet logs by tag, like <code>log_kind</code> or <code>log level</code>. Tag can be …\nIntervals to send health messages to the lock server. Set …\nHealth interval\nentity id\nSets the validation level for ID tokens.\nVarying levels of validations based on the preference of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe entity type name of the <code>TrustedIssuer</code> entity\nJWKS\nA Json Web Key Store (JWKS) with public keys.\nJWT config module\nA set of properties used to configure JWT in the <code>Cedarling</code> …\nJWT signature validation\nCheck the signature for all the Json Web Tokens.\nWhether to check the signature of all JWT tokens.\nCedarling will only accept tokens signed with these …\nJWT status validation\nWhether to check the status of the JWT.\nWhether to check the status of the JWT. On startup.\nControls whether Cedarling should listen for updates from …\nListen SSE\nControls whether Cedarling should listen for updates from …\nLoads the default configuration bundled with the library. …\nLoads a <code>BootstrapConfig</code> from a file.\nLoads a <code>BootstrapConfig</code> from a JSON string\nPath to a local file pointing containing a JWKS.\nJSON object with policy store\nIf Enabled, the Cedarling will connect to the Lock Master …\nLock config module\nLock service configuration. If <code>None</code> then lock service is …\nURI where Cedarling can get JSON file with all required …\nSSA for DCR in a Lock Master deployment. The Cedarling …\nLog config module\nA set of properties used to configure logging in the …\nIntervals to send log messages to the lock server. Set …\nLog interval\nLog level\nThe logging level\nThe logging level\nLog level filter for logging. TRACE is lowest. FATAL is …\nLog level filter for logging. TRACE is lowest. FATAL is …\nMaximum size of a single log entity in bytes using […\nMaximum number of log entities that can be stored using […\n<code>CEDARLING_LOG_TTL</code> in bootstrap properties documentation. …\nIf <code>log_type</code> is set to [<code>LogType::Memory</code>], this is the TTL …\nLog type\n<code>CEDARLING_LOG_TYPE</code> in bootstrap properties documentation.\nHow the Logs will be presented.\nMapping name of cedar schema Issuer entity\nMapping name of cedar schema TrustedIssuer entity\nMapping name of cedar schema Role entity\nMapping name of cedar schema Role entity.\nMapping name of cedar schema User entity\nMapping name of cedar schema User entity\nMapping name of cedar schema Workload entity\nMapping name of cedar schema Workload entity.\nMaximum size of base64-encoded default entity strings in …\nMaximum size of base64-encoded default entity strings in …\nMaximum number of default entities allowed in a policy …\nMaximum number of default entities allowed in a policy …\n<code>CEDARLING_LOG_MAX_ITEM_SIZE</code> in bootstrap properties …\n<code>CEDARLING_LOG_MAX_ITEMS</code> in bootstrap properties …\nCreate a new <code>JsonRule</code> from a JSON value.\nCreate a new instance of the Cedarling application.\nCreate a new instance of the Cedarling application. …\nPath\nResult of authorization where principal is <code>Jans::User</code>\nPolicy store config module\nA set of properties used to load <code>PolicyStore</code> in the …\nAn identifier for the policy store.\nPath to a Policy Store JSON file\nLocation of policy store JSON, used if policy store is not …\nReturn logs and remove them from the storage\nSpecifies what boolean operation to use for the <code>USER</code> and …\nPrincipal bool operator\nSpecifies what boolean operation to use for the <code>USER</code> and …\nResult of authorization for all principals. This field is …\nContains the JWTs that will be used for the AuthZ request\nRaw config module\nRequest ID, generated per each request call, is used to …\ncedar_policy resource data\ncedar_policy resource data\nThe entity type name of the <code>Role</code> entity\nCloses the connections to the Lock Server and pushes all …\nSupported signature algorithms\nOnly tokens signed with algorithms in this list can be …\nSource\nSpecifies the source from which the policy will be read.\nSoftware Statement Assertion Json Web Token that Cedarling …\nSSA JWT\nIntervals to send telemetry messages to the lock server. …\nTelemetry interval\nAllows to limit maximum token cache TTL in seconds. Zero …\nAllows to limit maximum token cache TTL in seconds. Zero …\nContains the JWTs that will be used for the AuthZ request\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nThe attribute to use when creating Role entities in the …\nThe attribute to use when creating Role entities in the …\nMapping name of cedar schema Role entity.\nUse user principal\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nUse workload principal\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nThe entity type name of the <code>User</code> entity\nToggles building the <code>User</code> entity\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nResult of authorization where principal is <code>Jans::Workload</code>\nThe entity type name of the <code>Workload</code> entity\nToggles building the <code>Workload</code> entity\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nAlways\nConfiguration to specify authorization workflow.\nRaw authorization config\nError when parsing <code>IdTokenTrustMode</code>\nID token trust mode\nIf present\nNever\nStrict\nToken entity names\nDecision log default JWT ID\nToken claims that will be used for decision logging. …\nDecision log user claims\nList of claims to map from user entity, such as [“sub”…\nDecision log workload claims\nList of claims to map from user entity, such as [“…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets the validation level for ID tokens.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrincipal bool operator\nSpecifies what boolean operation to use for the <code>USER</code> and …\n<code>ToString::to_string</code>, but without panic on OOM.\nUse user principal\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nUse workload principal\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nBootstrap Configurations for the JWT to Cedar entity …\nRaw entity builder config\nEntity names\nUnsigned role ID source\nToggles building the <code>User</code> entity\nToggles building the <code>Workload</code> entity\nThe names of the buildable Cedar entity type names\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe entity type name of the <code>TrustedIssuer</code> entity\nMapping name of cedar schema Issuer entity\nMapping name of cedar schema Role entity\nMapping name of cedar schema User entity\nMapping name of cedar schema Workload entity\nThe entity type name of the <code>Role</code> entity\nThe attribute to use when creating Role entities in the …\nThe attribute to use when creating Role entities in the …\nThe entity type name of the <code>User</code> entity\nToggles building the <code>User</code> entity\nEnables building the <code>User</code> entity\nEnables building the <code>Workload</code> entity\nThe entity type name of the <code>Workload</code> entity\nToggles building the <code>Workload</code> entity\nThe set of Bootstrap properties related to JWT validation.\nRaw JWT config\nValidation options related to JSON Web Tokens (JWT).\nReturns a default configuration for validating Access …\nAdds all supported algorithms to to …\nRequires the <code>aud</code> claim to be present in the JWT.\nCedarling will use the strictest validation options by …\nRequires the <code>exp</code> claim to be present in the JWT and the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRequires the <code>iat</code> claim to be present in the JWT.\nReturns a default configuration for validating ID Tokens.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRequires the <code>iss</code> claim to be present in the JWT and the …\nRequires the <code>jti</code> claim to be present in the JWT.\nJWKS\nA Json Web Key Store (JWKS) with public keys.\nJWT signature validation\nCheck the signature for all the Json Web Tokens.\nJWT status validation\nWhether to check the status of the JWT.\nRequires the <code>nbf</code> claim to be present in the JWT.\nCreates a new <code>JwtConfig</code> instance with validation turned …\nCollects all the required claims into a HashSet.\nSupported signature algorithms\nOnly tokens signed with algorithms in this list can be …\nRequires the <code>sub</code> claim to be present in the JWT.\nReturns a default configuration for validating Userinfo …\nLock service config\nRaw lock service config\nAllow interaction with a Lock server with invalid …\nAccept invalid certs\nURI where Cedarling can get metadata about the lock server.\nConfig URI\nToggles whether Cedarling should listen for SSE config …\nDynamic config\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntervals to send health messages to the lock server. Set …\nHealth interval\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls whether Cedarling should listen for updates from …\nListen SSE\nIntervals to send log messages to the lock server. Set …\nLog interval\nThe logging level\nThe logging level\nSoftware Statement Assertion Json Web Token that Cedarling …\nSSA JWT\nIntervals to send telemetry messages to the lock server. …\nTelemetry interval\nConfig for the lock logger that are set using the …\nA set of properties used to configure logging in the …\nRaw log config\nLog type configuration. <code>CEDARLING_LOG_TYPE</code> in bootstrap …\nLogger holds all logs in database (in memory) with …\nConfiguration for memory log.\nRaw memory log config\nLogger do nothing. It means that all logs will be ignored.\nLogger writes log information to std output stream.\nAllow interaction with a Lock server with invalid …\nURI where Cedarling can get metadata about the lock server.\nToggles whether Cedarling should listen for SSE config …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntervals to send health messges to the lock server. Set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nControls whether Cedarling should listen for updates from …\nIntervals to send log messges to the lock server. Set this …\nLog level\nLog level filter for logging. TRACE is lowest. FATAL is …\nThe logging level\nLog TTL\n<code>CEDARLING_LOG_TTL</code> in bootstrap properties documentation. …\nLog type\n<code>CEDARLING_LOG_TYPE</code> in bootstrap properties documentation.\nMax item size\n<code>CEDARLING_LOG_MAX_ITEM_SIZE</code> in bootstrap properties …\nMax items\n<code>CEDARLING_LOG_MAX_ITEMS</code> in bootstrap properties …\nSoftware Statement Assertion Json Web Token that Cedarling …\nIntervals to send telemetry messges to the lock server. …\nFile JSON\nRead policy from a JSON File.\nFile YAML\nRead policy from a YAML File.\nJSON\nRead the policy directly from a raw JSON string.\nLock server\nFetch the policies from the Lock Master service using a …\n<code>PolicyStoreConfig</code> - Configuration for the policy store.\nRaw policy store config\n<code>PolicyStoreSource</code> represents the source from which …\nRaw policy store source\nYAML\nRead the policy directly from a raw YAML string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath\nSource\nSpecifies the source from which the policy will be read.\nStruct that represent mapping mapping <code>Bootstrap properties</code> …\nRepresent as disabled.\nRepresent as enabled.\nEnum varians that represent if feature is enabled or …\nType of logger\nLogger that collect messages in memory. Log entities …\nDisabled logger\nError parsing feature toggle\nError parsing logger type\nError parsing trust mode\nError parsing workload bool op\nLogger that print logs to stdout\nAllow interaction with a Lock server with invalid …\nHuman friendly identifier for the application\nHow often to send health messages to Lock Master (0 to …\nHow often to send log messages to Lock Master (0 to turn …\nHow often to send telemetry messages to Lock Master (0 to …\nToken claims that will be used for decision logging. …\nList of claims to map from user entity, such as [“sub”…\nList of claims to map from user entity, such as [“…\nControls whether Cedarling should listen for SSE config …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse bool to <code>FeatureToggle</code>.\nConstruct <code>BootstrapConfig</code> from environment variables and …\nParse string to <code>LoggerType</code> enum.\nVarying levels of validations based on the preference of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if is enabled.\nWhether to check the signature of all JWT tokens.\nCedarling will only accept tokens signed with these …\nWhether to check the status of the JWT. On startup.\nControls whether Cedarling should listen for updates from …\nPath to a local file pointing containing a JWKS.\nJSON object with policy store\nIf Enabled, the Cedarling will connect to the Lock Master …\nURI where Cedarling can get JSON file with all required …\nSSA for DCR in a Lock Master deployment. The Cedarling …\nLog level filter for logging. TRACE is lowest. FATAL is …\nMaximum size of a single log entity in bytes using […\nMaximum number of log entities that can be stored using […\nIf <code>log_type</code> is set to [<code>LogType::Memory</code>], this is the TTL …\nHow the Logs will be presented.\nMapping name of cedar schema TrustedIssuer entity\nMapping name of cedar schema Role entity.\nMapping name of cedar schema User entity\nMapping name of cedar schema Workload entity.\nMaximum size of base64-encoded default entity strings in …\nMaximum number of default entities allowed in a policy …\nAn identifier for the policy store.\nPath to a Policy Store JSON file\nLocation of policy store JSON, used if policy store is not …\nSpecifies what boolean operation to use for the <code>USER</code> and …\nAllows to limit maximum token cache TTL in seconds. Zero …\nToken settings module\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\n<code>ToString::to_string</code>, but without panic on OOM.\nMapping name of cedar schema Role entity.\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nWhen <code>enabled</code>, Cedar engine authorization is queried for a …\nClaims validation config\nDetailed configuration for a single token-based entity.\nConfiguration for token-based entities, mapping token …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a config without validation")